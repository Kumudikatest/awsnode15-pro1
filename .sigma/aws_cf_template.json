{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This template creates the stack for project AWSNode15-pro1. Generated by Sigma",
  "Parameters": {
    "lambdaCodeBucketParameter": {
      "Type": "String",
      "Description": "Name of the S3 bucket containing the Lambda deployment package"
    },
    "lambdaCodeKeyParameter": {
      "Type": "String",
      "Description": "S3 key of the Lambda deployment package"
    },
    "envVark1Parameter": {
      "Type": "String",
      "Description": "Value of the environment variable: k1, for all Lambdas"
    }
  },
  "Outputs": {
    "apigk15APIkANY": {
      "Description": "URL of k15API/k:ANY endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "apigk15API"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".amazonaws.com/",
            "k",
            "/k"
          ]
        ]
      }
    },
    "cognitoHotSpacesVendorAppDev": {
      "Description": "ID of Cognito user pool HotSpaces Vendor App Dev",
      "Value": "us-east-1_mcdTV1jKi"
    },
    "AWSNode15Pro1": {
      "Description": "ARN of Lambda function AWSNode15Pro1",
      "Value": {
        "Fn::GetAtt": [
          "AWSNode15Pro1",
          "Arn"
        ]
      }
    },
    "apigk15kANY": {
      "Description": "URL of k15/k:ANY endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "apigk15"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".amazonaws.com/",
            "k",
            "/k"
          ]
        ]
      }
    },
    "subdirnodefuncinsidesubdir": {
      "Description": "ARN of Lambda function nodefuncinsidesubdir",
      "Value": {
        "Fn::GetAtt": [
          "subdirnodefuncinsidesubdir",
          "Arn"
        ]
      }
    },
    "snsNotifications": {
      "Description": "ARN of SNS topic Notifications",
      "Value": "arn:aws:sns:us-east-1:318300609668:Notifications"
    },
    "2ndNodefunc": {
      "Description": "ARN of Lambda function 2ndNodefunc",
      "Value": {
        "Fn::GetAtt": [
          "2ndNodefunc",
          "Arn"
        ]
      }
    }
  },
  "Resources": {
    "apigk15": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Description": "An API generated by Sigma",
        "Name": "k15",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        }
      }
    },
    "apigk15k": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "apigk15"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "apigk15",
            "RootResourceId"
          ]
        },
        "PathPart": "k"
      }
    },
    "apigk15kANY": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "apigk15"
        },
        "ResourceId": {
          "Ref": "apigk15k"
        },
        "HttpMethod": "ANY",
        "AuthorizationType": "NONE",
        "MethodResponses": [
          {
            "StatusCode": "200"
          }
        ],
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${subdirnodefuncinsidesubdir.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200"
            }
          ]
        }
      }
    },
    "apigk15API": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Description": "An API generated by Sigma",
        "Name": "k15API",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        }
      }
    },
    "apigk15APIk": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "apigk15API"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "apigk15API",
            "RootResourceId"
          ]
        },
        "PathPart": "k"
      }
    },
    "apigk15APIkANY": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "apigk15API"
        },
        "ResourceId": {
          "Ref": "apigk15APIk"
        },
        "HttpMethod": "ANY",
        "AuthorizationType": "NONE",
        "MethodResponses": [
          {
            "StatusCode": "200"
          }
        ],
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AWSNode15Pro1.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200"
            }
          ]
        }
      }
    },
    "AWSNode15Pro1": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "AWSNode15Pro1",
        "Description": "Invokes functions defined in AWSNode15-pro1.js in project AWSNode15-pro1. Generated by Sigma.",
        "Code": {
          "S3Bucket": {
            "Ref": "lambdaCodeBucketParameter"
          },
          "S3Key": {
            "Ref": "lambdaCodeKeyParameter"
          }
        },
        "MemorySize": 256,
        "Handler": "AWSNode15-pro1.handler",
        "Timeout": 60,
        "Runtime": "nodejs10.x",
        "Layers": [],
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Role": {
          "Fn::GetAtt": [
            "AWSNode15Pro1ExecutionRole",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "k1": {
              "Ref": "envVark1Parameter"
            },
            "SIGMA_AWS_ACC_ID": {
              "Ref": "AWS::AccountId"
            }
          }
        }
      }
    },
    "AWSNode15Pro1ExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "AWSNode15Pro1Policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "cognito-idp:ListUsers"
                  ],
                  "Resource": "arn:aws:cognito-idp:us-east-1:318300609668:userpool/us-east-1_mcdTV1jKi"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "rekognition:CompareFaces"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": "arn:aws:s3:::ea/ds"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": "arn:aws:s3:::sd/sds"
                }
              ]
            }
          }
        ]
      }
    },
    "apigk15APIkANYPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "AWSNode15Pro1"
        },
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/*/${__Method__}${__Path__}",
            {
              "__Method__": "*",
              "__Path__": "/k",
              "__ApiId__": {
                "Ref": "apigk15API"
              }
            }
          ]
        },
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "subdirnodefuncinsidesubdir": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "nodefuncinsidesubdir",
        "Description": "Invokes functions defined in subdir/nodefuncinsidesubdir.js in project AWSNode15-pro1. Generated by Sigma.",
        "Code": {
          "S3Bucket": {
            "Ref": "lambdaCodeBucketParameter"
          },
          "S3Key": {
            "Ref": "lambdaCodeKeyParameter"
          }
        },
        "MemorySize": 128,
        "Handler": "subdir/nodefuncinsidesubdir.handler",
        "Timeout": 60,
        "Runtime": "nodejs10.x",
        "Layers": [],
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Role": {
          "Fn::GetAtt": [
            "subdirnodefuncinsidesubdirExecutionRole",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "k1": {
              "Ref": "envVark1Parameter"
            },
            "SIGMA_AWS_ACC_ID": {
              "Ref": "AWS::AccountId"
            }
          }
        }
      }
    },
    "subdirnodefuncinsidesubdirExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }
      }
    },
    "apigk15kANYPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "subdirnodefuncinsidesubdir"
        },
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/*/${__Method__}${__Path__}",
            {
              "__Method__": "*",
              "__Path__": "/k",
              "__ApiId__": {
                "Ref": "apigk15"
              }
            }
          ]
        },
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "2ndNodefunc": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "2ndNodefunc",
        "Description": "Invokes functions defined in 2ndNodefunc.js in project AWSNode15-pro1. Generated by Sigma.",
        "Code": {
          "S3Bucket": {
            "Ref": "lambdaCodeBucketParameter"
          },
          "S3Key": {
            "Ref": "lambdaCodeKeyParameter"
          }
        },
        "MemorySize": 128,
        "Handler": "2ndNodefunc.handler",
        "Timeout": 60,
        "Runtime": "nodejs10.x",
        "Layers": [],
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Role": {
          "Fn::GetAtt": [
            "2ndNodefuncExecutionRole",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "k1": {
              "Ref": "envVark1Parameter"
            },
            "SIGMA_AWS_ACC_ID": {
              "Ref": "AWS::AccountId"
            }
          }
        }
      }
    },
    "2ndNodefuncExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "2ndNodefuncPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "rekognition:CompareFaces"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": "arn:aws:s3:::sd/sd"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": "arn:aws:s3:::sd/sd"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": "arn:aws:sns:us-east-1:318300609668:Notifications"
                }
              ]
            }
          }
        ]
      }
    },
    "apigk15APIDeployment1615812085834": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "apigk15API"
        },
        "Description": "An API deployment generated by Sigma for API k15API",
        "StageName": "k"
      },
      "DependsOn": [
        "apigk15APIkANY"
      ]
    },
    "apigk15Deployment1615812085834": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "apigk15"
        },
        "Description": "An API deployment generated by Sigma for API k15",
        "StageName": "k"
      },
      "DependsOn": [
        "apigk15kANY"
      ]
    }
  }
}